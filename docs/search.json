[
  {
    "objectID": "nbk/wip/med_2_sorted_lists_1.html",
    "href": "nbk/wip/med_2_sorted_lists_1.html",
    "title": "katapult",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nfrom pydantic import BaseModel\n\n\ndef highlight_greaterthan(value, threshold, color='yellow'):\n    \"\"\"Highlights cells greater than a threshold value.\"\"\"\n    if isinstance(value, (int, float)) and value &gt;= threshold:\n        return f'background-color: {color}'\n    return ''\n\ndef highlight_series(series, idx, color=\"green\"):\n    return (\n        series\n        .to_frame()\n        .T\n        .style\n        .map(lambda x: highlight_greaterthan(x, series[idx], color))\n    )\n\n# --------------------------------------------------------------------------------------\nclass Span(BaseModel):\n    low: int\n    high: int\n    \ndef get_split(span: Span):\n    n = span.high - span.low + 1\n    return span.low + n // 2\n    \n# --------------------------------------------------------------------------------------\ndef check_split(a, b, a_split, b_split, **kwargs):\n    # looking at split in 'a' ...\n    lower_split = bool(a[a_split - 1] &gt; b[b_split])\n    raise_split = bool(b[b_split - 1] &gt; a[a_split])\n    \n    is_valid = not (lower_split or raise_split)\n    \n    return dict(is_valid=is_valid, lower_split=lower_split, raise_split=raise_split)\n\ndef estimate_splits(a, b, a_split, b_split, a_span, status):\n    if status[\"lower_split\"]:\n        new_span = Span(low=a_span.low, high=a_split)\n    if status[\"raise_split\"]:\n        new_span = Span(low=a_split, high=a_span.high)\n    new_a_split = get_split(new_span)\n    new_b_split = b_split - (new_a_split - a_split)\n    return dict(\n        a_split = new_a_split, \n        b_split = new_b_split,\n        a_span = new_span,\n    )\n\n# --------------------------------------------------------------------------------------\ndef calculate_median(a, b, est):\n    n = len(a) + len(b)\n    a_split = est[\"a_split\"]\n    b_split = est[\"b_split\"]\n    if n % 2 == 0:\n        max_left = max(a[a_split - 1], b[b_split - 1])\n        min_right = min(a[a_split], b[b_split])\n        med = (max_left + min_right) / 2\n    else:\n        med = min(a[a_split], b[b_split])\n    return med\n\n\n\nna = np.random.randint(50, high=60)\nnb = np.random.randint(60, high=70)\nn = na + nb\n\na_range = Span(low=0, high=na - 1)\nb_range = Span(low=0, high=nb - 1)\ncombined_range = Span(low=0, high=n - 1)\n\nsplit_index = get_split(combined_range)\n\na_split = get_split(a_range)\nb_split = split_index - a_split\n\nprint(f\"{na}, {nb}, {n}\")\na_split, b_split, split_index\n\n54, 61, 115\n\n\n(27, 30, 57)\n\n\n\na = (\n    pd.Series(np.random.randint(0, high=100, size=na))\n    .sort_values()\n    .reset_index(drop=True)\n)\nb = (\n    pd.Series(np.random.randint(0, high=100, size=nb))\n    .sort_values()\n    .reset_index(drop=True)\n)\nest = {\"a_split\": a_split, \"b_split\": b_split, \"a_span\": a_range}\n\n\nhave a, b, initial_splits\nis split valid?\nyes: done\nno: estimate_splits\ngoto is split valid?\n\n\ndisplay(a.pipe(highlight_series, get_split(a_range), \"lightgreen\"))\ndisplay(b.pipe(highlight_series, get_split(b_range), \"lightblue\"))\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n\n0\n1\n2\n3\n7\n8\n10\n10\n13\n14\n14\n16\n17\n23\n31\n37\n37\n38\n40\n40\n42\n44\n50\n52\n53\n54\n55\n56\n58\n60\n63\n64\n64\n67\n67\n67\n68\n69\n70\n71\n73\n73\n74\n76\n78\n79\n79\n83\n85\n89\n92\n95\n96\n98\n98\n\n\n\n\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n\n0\n0\n1\n5\n5\n7\n7\n9\n10\n14\n17\n18\n21\n23\n29\n31\n32\n34\n36\n39\n40\n41\n42\n44\n44\n45\n45\n47\n51\n52\n55\n55\n58\n59\n60\n61\n62\n65\n65\n65\n69\n69\n69\n72\n72\n72\n73\n74\n74\n76\n78\n84\n85\n85\n85\n87\n87\n90\n93\n94\n94\n96\n\n\n\n\n\n\nc = (\n    pd.concat([a, b], ignore_index=True)\n    .sort_values()\n    .reset_index(drop=True)\n)\ndisplay(c.pipe(highlight_series, split_index, \"aqua\"))\nmed_from_sorted = c.median()\nprint(f\"median = {med_from_sorted}\")\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n\n\n\n\n0\n0\n1\n1\n2\n3\n5\n5\n7\n7\n7\n8\n9\n10\n10\n10\n13\n14\n14\n14\n16\n17\n17\n18\n21\n23\n23\n29\n31\n31\n32\n34\n36\n37\n37\n38\n39\n40\n40\n40\n41\n42\n42\n44\n44\n44\n45\n45\n47\n50\n51\n52\n52\n53\n54\n55\n55\n55\n56\n58\n58\n59\n60\n60\n61\n62\n63\n64\n64\n65\n65\n65\n67\n67\n67\n68\n69\n69\n69\n69\n70\n71\n72\n72\n72\n73\n73\n73\n74\n74\n74\n76\n76\n78\n78\n79\n79\n83\n84\n85\n85\n85\n85\n87\n87\n89\n90\n92\n93\n94\n94\n95\n96\n96\n98\n98\n\n\n\n\n\nmedian = 56.0\n\n\n\nsplit_status = check_split(a, b, **est)\nsplit_status\n\n\nprint(est)\nprint(split_status)\nprint(\"-\" * 100)\n\nwhile not split_status[\"is_valid\"]:\n    est = estimate_splits(a, b, **est, status=split_status)\n    print(est)\n    split_status = check_split(a, b, **est)\n    print(split_status)\n    print(\"-\" * 100)\n    \ndisplay(a.pipe(highlight_series, est[\"a_split\"], \"lightgreen\"))\ndisplay(b.pipe(highlight_series, est[\"b_split\"], \"lightblue\"))\n\n\nmed_from_algo = calculate_median(a, b, est)\nprint(f\"median: {med_from_algo} == {med_from_sorted} -&gt; {med_from_algo == med_from_sorted}\")\n\nFirst check: 1) \\(\\max(A_{lower}) \\le \\min(B_{upper})\\) 1) \\(\\max(B_{lower}) \\le \\min(A_{upper})\\)\nif (1) and (2) and n is even then median = \\(\\text{med}(\\text{sorted}(\\max(A_{lower}), \\max(B_{lower}), \\min(A_{upper}), \\min(B_{upper}))\\)\nif (1) and not (2):\n\\(A_{lower}\n  \\begin{cases}\n    \\leq A_{upper} \\\\\n    \\leq B_{upper}\n  \\end{cases}\\)\nand\n\\(B_{upper}\n  \\begin{cases}\n    \\geq A_{lower} \\\\\n    \\geq B_{lower}\n  \\end{cases}\\)\nso we can eliminate \\(A_{lower}\\) and \\(B_{upper}\\) from consideration.\nif (2) and not (1):\n\\(B_{lower}\n  \\begin{cases}\n    \\leq A_{upper} \\\\\n    \\leq B_{upper}\n  \\end{cases}\\)\nand\n\\(A_{upper}\n  \\begin{cases}\n    \\geq A_{lower} \\\\\n    \\geq B_{lower}\n  \\end{cases}\\)\nso we can eliminate \\(A_{upper}\\) and \\(B_{lower}\\) from consideration."
  },
  {
    "objectID": "nbk/reports/med_2_sorted_lists_3.html",
    "href": "nbk/reports/med_2_sorted_lists_3.html",
    "title": "Median of 2 sorted lists",
    "section": "",
    "text": "from pydantic import BaseModel\nimport numpy as np\nimport pandas as pd\n\n\ndef pad(x):\n    return [-float(\"inf\")] + x + [float(\"inf\")]\n\nclass Pointers():\n    def __init__(self, high, target, low):\n        self.high = high\n        self.target = target\n        self.low = low\n\nclass BorderValues():\n    def __init__(self, max_low, min_high):\n        self.max_low = max_low\n        self.min_high = min_high\n\nclass OrderedList:\n    def __init__(self, nums, target=None):\n        self.list = nums\n        self.padded_list = pad(nums)\n        self.n = len(self.padded_list)\n        self.search_idx = Pointers(low=0, target=self.n // 2, high=self.n)\n        # override target if given\n        if target != None:\n            self.set_target(target)\n        else:\n            self.set_border_values()\n\n    def set_target(self, target):\n        self.search_idx.target = target\n        self.set_border_values()\n        \n    def set_border_values(self):\n        self.split = BorderValues(\n            max_low=self.padded_list[self.search_idx.target - 1], \n            min_high=self.padded_list[self.search_idx.target],\n        )\n        \n    def next_target(self, up=True):\n        if up:\n            self.search_idx.low = self.search_idx.target\n        else:\n            self.search_idx.high = self.search_idx.target\n        self.search_idx.target = (self.search_idx.low + self.search_idx.high) // 2\n        self.set_border_values()\n\n    def __repr__(self):\n        return str(self.list)\n        \ndef find_median(a, b, target_index):\n    a_lower_lte_b_upper = a.split.max_low &lt;= b.split.min_high\n    b_lower_lte_a_upper = b.split.max_low &lt;= a.split.min_high\n    \n    if not a_lower_lte_b_upper:\n        a.next_target(up=False)\n        b.search_idx.target = target_index - a.search_idx.target\n        b.set_border_values()\n        a, b = find_median(a, b, target_index)\n    elif not b_lower_lte_a_upper:\n        a.next_target(up=True)\n        b.search_idx.target = target_index - a.search_idx.target\n        b.set_border_values()\n        a, b = find_median(a, b, target_index)\n        \n    return a, b\n    \ndef calculate_median(a, b):\n    n = a.n + b.n\n    max_low = max(a.split.max_low, b.split.max_low)\n    min_high = min(a.split.min_high, b.split.min_high)\n    #print(median_input_values)\n    if n % 2 == 0:\n        med = (max_low + min_high) / 2.0\n    else:\n        med = min_high\n        \n    return med\n    \ndef main(nums1, nums2):\n    a, b = OrderedList(nums1), OrderedList(nums2)\n    # make sure a contains the shorter list\n    a, b = (a, b) if a.n &lt;= b.n else (b, a)\n    target_index = (a.n + b.n) // 2\n    b.set_target(target_index - a.search_idx.target)\n    a, b = find_median(a, b, target_index)\n    med = calculate_median(a, b)\n    return a, b, med\n\n\ndef highlight_ol(ol: OrderedList):\n    green_cols = list(range(ol.search_idx.low, ol.search_idx.target))\n    blue_cols = list(range(ol.search_idx.target, ol.search_idx.high))\n    s = (\n        pd.Series(ol.padded_list).to_frame().T\n        .style\n        .set_properties(subset=green_cols, **{\"background-color\": \"lightgreen\"})\n        .set_properties(subset=blue_cols, **{\"background-color\": \"lightblue\"})\n    )\n    return s\n\n\noverride_a = False\noverride_b = False\n\nna_ = np.random.randint(1, 100)\nnb_ = np.random.randint(1, 100)\n\na_ = np.random.randint(0, 60, na_).tolist()\na_.sort()\n\n# override a\n#override_a = True\nif override_a:\n    a_ = [1]\n    na_ = len(a_)\n\nb_ = np.random.randint(40, 100, nb_).tolist()\nb_.sort()\n\n# override b\n#override_b = True\nif override_b:\n    b_ = [1]\n    nb_ = len(b_)\n\nc_ = np.concat([a_, b_]).astype(int).tolist()\nc_.sort()\nn_ = len(c_)\nmed_calc = np.median(c_)\n\ndisplay(highlight_ol(OrderedList(c_)))\nprint(f\"calculated median = {med_calc}\")\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n\n\n\n\n0\n-inf\n0.000000\n0.000000\n0.000000\n1.000000\n3.000000\n3.000000\n4.000000\n5.000000\n7.000000\n7.000000\n7.000000\n8.000000\n8.000000\n8.000000\n8.000000\n10.000000\n11.000000\n11.000000\n12.000000\n14.000000\n15.000000\n16.000000\n17.000000\n17.000000\n17.000000\n18.000000\n18.000000\n18.000000\n20.000000\n21.000000\n21.000000\n22.000000\n22.000000\n23.000000\n25.000000\n26.000000\n27.000000\n27.000000\n28.000000\n31.000000\n31.000000\n35.000000\n35.000000\n36.000000\n37.000000\n37.000000\n39.000000\n40.000000\n40.000000\n41.000000\n41.000000\n41.000000\n41.000000\n42.000000\n42.000000\n42.000000\n42.000000\n42.000000\n43.000000\n43.000000\n43.000000\n44.000000\n44.000000\n45.000000\n46.000000\n46.000000\n46.000000\n47.000000\n48.000000\n48.000000\n48.000000\n48.000000\n49.000000\n49.000000\n50.000000\n51.000000\n51.000000\n51.000000\n52.000000\n52.000000\n52.000000\n52.000000\n53.000000\n53.000000\n54.000000\n54.000000\n54.000000\n55.000000\n55.000000\n55.000000\n56.000000\n57.000000\n57.000000\n57.000000\n57.000000\n57.000000\n58.000000\n58.000000\n58.000000\n60.000000\n60.000000\n61.000000\n62.000000\n63.000000\n64.000000\n64.000000\n65.000000\n66.000000\n66.000000\n67.000000\n68.000000\n68.000000\n69.000000\n69.000000\n70.000000\n70.000000\n70.000000\n70.000000\n71.000000\n71.000000\n74.000000\n74.000000\n74.000000\n76.000000\n76.000000\n77.000000\n79.000000\n79.000000\n79.000000\n79.000000\n80.000000\n80.000000\n81.000000\n83.000000\n84.000000\n84.000000\n84.000000\n87.000000\n87.000000\n91.000000\n92.000000\n93.000000\n93.000000\n94.000000\n94.000000\n94.000000\n95.000000\n95.000000\n95.000000\n96.000000\ninf\n\n\n\n\n\ncalculated median = 50.5\n\n\n\na, b, med = main(a_, b_)\ntry:\n    display(highlight_ol(a))\n    display(highlight_ol(b))\nexcept:\n    pass\nfinally:\n    display(med)\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\n\n\n0\n-inf\n0.000000\n0.000000\n0.000000\n1.000000\n3.000000\n3.000000\n4.000000\n5.000000\n7.000000\n7.000000\n7.000000\n8.000000\n8.000000\n8.000000\n8.000000\n10.000000\n11.000000\n11.000000\n12.000000\n14.000000\n15.000000\n16.000000\n17.000000\n17.000000\n17.000000\n18.000000\n18.000000\n18.000000\n20.000000\n21.000000\n21.000000\n22.000000\n22.000000\n23.000000\n25.000000\n26.000000\n27.000000\n27.000000\n28.000000\n31.000000\n31.000000\n35.000000\n35.000000\n36.000000\n37.000000\n37.000000\n39.000000\n40.000000\n40.000000\n41.000000\n42.000000\n43.000000\n43.000000\n44.000000\n46.000000\n46.000000\n47.000000\n48.000000\n51.000000\n51.000000\n54.000000\n54.000000\n55.000000\n55.000000\n57.000000\n57.000000\n57.000000\n58.000000\n58.000000\n58.000000\ninf\n\n\n\n\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n\n\n\n\n0\n-inf\n41.000000\n41.000000\n41.000000\n42.000000\n42.000000\n42.000000\n42.000000\n43.000000\n44.000000\n45.000000\n46.000000\n48.000000\n48.000000\n48.000000\n49.000000\n49.000000\n50.000000\n51.000000\n52.000000\n52.000000\n52.000000\n52.000000\n53.000000\n53.000000\n54.000000\n55.000000\n56.000000\n57.000000\n57.000000\n60.000000\n60.000000\n61.000000\n62.000000\n63.000000\n64.000000\n64.000000\n65.000000\n66.000000\n66.000000\n67.000000\n68.000000\n68.000000\n69.000000\n69.000000\n70.000000\n70.000000\n70.000000\n70.000000\n71.000000\n71.000000\n74.000000\n74.000000\n74.000000\n76.000000\n76.000000\n77.000000\n79.000000\n79.000000\n79.000000\n79.000000\n80.000000\n80.000000\n81.000000\n83.000000\n84.000000\n84.000000\n84.000000\n87.000000\n87.000000\n91.000000\n92.000000\n93.000000\n93.000000\n94.000000\n94.000000\n94.000000\n95.000000\n95.000000\n95.000000\n96.000000\ninf\n\n\n\n\n\n50.5\n\n\n\nprint(f\"calculated med == med: {med_calc == med}\")\n\ncalculated med == med: True"
  },
  {
    "objectID": "srv/services.html",
    "href": "srv/services.html",
    "title": "Services",
    "section": "",
    "text": "There is a default web app here: webapp\nYou should provide a brief description here.\nThe JupyterLab server is here: JupyterLab"
  },
  {
    "objectID": "srv/documentation.html",
    "href": "srv/documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "This is where you can provide more detailed documentation about the project."
  },
  {
    "objectID": "lib/src/katapult/project_template/{{cookiecutter.project_slug}}/srv/reports.html",
    "href": "lib/src/katapult/project_template/{{cookiecutter.project_slug}}/srv/reports.html",
    "title": "Listing Example",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nAuthor\n\n\n\n\n\n\n\n\nMedian of 2 sorted lists\n\n\n \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "README.html",
    "href": "README.html",
    "title": "Katapult",
    "section": "",
    "text": "Katapult creates an isolated development environment that can be configured to include a JupyterHub server, a Quart api service, a fasthtml webapp, and the template for a python library. In addition, Quarto is used to create static websites that integrate easily with github pages and provide downloadable html files of jupyter notebooks.\nview on github pages\n\n\nAs a data scientist, it would be nice to be able to work in an isolated environment for each of our projects that is easily portable from your laptop to any network infrastructure.\nKatapult provides a single container that has the following tools:\n\nJupyterHub: Explore data, prototype transformations and models, and make publishable reports.\nQuart: Create an api that allows programmatic access to information generated by your service.\nfasthtml: Create dashboards and tools to help others gain insight from your work.\nQuarto: Publish stand alone, interactive reports that can be downloaded and distributed in various formats. Create project documentation using Markdown and Jupyter.\n\n\n\n\n\n\n\n*nix environment (e.g. linux, macOS). On Windows use wsl2.\ndocker\nPython 3.12\n\n\n\n\n\npipx install “git+https://github.com/ajp619/katapult#subdirectory=lib”\n\n\n\n\nCreate a new project from the katapult template with:\nkat init\nEnter the project name and accept the rest of the defaults. This will create a new directory for your project.\nChange to the new project directory and use:\nkatx run\nThis will build the container, launch it, render the static content, and show you the status of the services.\nYou can now access the container at http://localhost/&lt;project name&gt;\n\n\n\n\nThere are two commands: kat and katx.\nkat is for managing high level concerns such as creating projects and creating the hub container that allows you to access all of your projects as path extensions (e.g. http://localhost/&lt;project name&gt;).\nTo get help use:\nkat --help\nkatx is for managing the each individual project.\nTo enable katx use:\nkat config\nThis will add code to your .bashrc file that will dynamically add katx to your path when you enter a project directory.\nTo get help with katx use:\nkatx --help\nwhile in the project directory (or subfolder).\nFor reference, this is the code added to you .bashrc:\n# Section added by katapult to dynamically add katx to path based on project\n# Intended to be added to .bashrc\n#\nRAW_PATH=\"$PATH\"\nLAST_WD=`pwd`\n\naugment_path() {\n    target=\".katapult\"\n    if [ \"$PWD\" = \"$LAST_WD\" ]; then return 0; fi;\n    PATH_ADDITION=\"\"\n    scandir=\"$PWD\"\n    until [ \"$scandir\" = \"\" ]; do\n    resolved_target=\"$scandir\"/\"$target\"\n    if [ -d \"$resolved_target\" ]; then\n        PATH_ADDITION=\"$PATH_ADDITION:$resolved_target\"\n    fi\n    scandir=\"${scandir%/*}\"\n    done\n    PATH=\"$PATH_ADDITION:$RAW_PATH\"\n    LAST_WD=`pwd`\n}\n\nif [ -z ${PROMPT_COMMAND+x} ]; then\n    # prompt not found\n    PROMPT_COMMAND=\"augment_path\"\nelse\n    # prompt found\n    PROMPT_COMMAND=\"$PROMPT_COMMAND; augment_path\"\nfi\n#\n# End of section generated by katapult\n\n\n\nContributors names and contact info\nAaron Palumbo\n\n\n\n\n0.1\n\nInitial Release\n\n\n\n\n\nThis project is licensed under the MIT License - see the LICENSE.md file for details"
  },
  {
    "objectID": "README.html#description",
    "href": "README.html#description",
    "title": "Katapult",
    "section": "",
    "text": "As a data scientist, it would be nice to be able to work in an isolated environment for each of our projects that is easily portable from your laptop to any network infrastructure.\nKatapult provides a single container that has the following tools:\n\nJupyterHub: Explore data, prototype transformations and models, and make publishable reports.\nQuart: Create an api that allows programmatic access to information generated by your service.\nfasthtml: Create dashboards and tools to help others gain insight from your work.\nQuarto: Publish stand alone, interactive reports that can be downloaded and distributed in various formats. Create project documentation using Markdown and Jupyter."
  },
  {
    "objectID": "README.html#getting-started",
    "href": "README.html#getting-started",
    "title": "Katapult",
    "section": "",
    "text": "*nix environment (e.g. linux, macOS). On Windows use wsl2.\ndocker\nPython 3.12\n\n\n\n\n\npipx install “git+https://github.com/ajp619/katapult#subdirectory=lib”\n\n\n\n\nCreate a new project from the katapult template with:\nkat init\nEnter the project name and accept the rest of the defaults. This will create a new directory for your project.\nChange to the new project directory and use:\nkatx run\nThis will build the container, launch it, render the static content, and show you the status of the services.\nYou can now access the container at http://localhost/&lt;project name&gt;"
  },
  {
    "objectID": "README.html#help",
    "href": "README.html#help",
    "title": "Katapult",
    "section": "",
    "text": "There are two commands: kat and katx.\nkat is for managing high level concerns such as creating projects and creating the hub container that allows you to access all of your projects as path extensions (e.g. http://localhost/&lt;project name&gt;).\nTo get help use:\nkat --help\nkatx is for managing the each individual project.\nTo enable katx use:\nkat config\nThis will add code to your .bashrc file that will dynamically add katx to your path when you enter a project directory.\nTo get help with katx use:\nkatx --help\nwhile in the project directory (or subfolder).\nFor reference, this is the code added to you .bashrc:\n# Section added by katapult to dynamically add katx to path based on project\n# Intended to be added to .bashrc\n#\nRAW_PATH=\"$PATH\"\nLAST_WD=`pwd`\n\naugment_path() {\n    target=\".katapult\"\n    if [ \"$PWD\" = \"$LAST_WD\" ]; then return 0; fi;\n    PATH_ADDITION=\"\"\n    scandir=\"$PWD\"\n    until [ \"$scandir\" = \"\" ]; do\n    resolved_target=\"$scandir\"/\"$target\"\n    if [ -d \"$resolved_target\" ]; then\n        PATH_ADDITION=\"$PATH_ADDITION:$resolved_target\"\n    fi\n    scandir=\"${scandir%/*}\"\n    done\n    PATH=\"$PATH_ADDITION:$RAW_PATH\"\n    LAST_WD=`pwd`\n}\n\nif [ -z ${PROMPT_COMMAND+x} ]; then\n    # prompt not found\n    PROMPT_COMMAND=\"augment_path\"\nelse\n    # prompt found\n    PROMPT_COMMAND=\"$PROMPT_COMMAND; augment_path\"\nfi\n#\n# End of section generated by katapult"
  },
  {
    "objectID": "README.html#authors",
    "href": "README.html#authors",
    "title": "Katapult",
    "section": "",
    "text": "Contributors names and contact info\nAaron Palumbo"
  },
  {
    "objectID": "README.html#version-history",
    "href": "README.html#version-history",
    "title": "Katapult",
    "section": "",
    "text": "0.1\n\nInitial Release"
  },
  {
    "objectID": "README.html#license",
    "href": "README.html#license",
    "title": "Katapult",
    "section": "",
    "text": "This project is licensed under the MIT License - see the LICENSE.md file for details"
  },
  {
    "objectID": "lib/src/katapult/project_template/{{cookiecutter.project_slug}}/srv/documentation.html",
    "href": "lib/src/katapult/project_template/{{cookiecutter.project_slug}}/srv/documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "This is where you can provide more detailed documentation about the project."
  },
  {
    "objectID": "lib/src/katapult/project_template/{{cookiecutter.project_slug}}/srv/services.html",
    "href": "lib/src/katapult/project_template/{{cookiecutter.project_slug}}/srv/services.html",
    "title": "Services",
    "section": "",
    "text": "There is a default web app here: webapp\nYou should provide a brief description here.\nThe JupyterLab server is here: JupyterLab"
  },
  {
    "objectID": "srv/reports.html",
    "href": "srv/reports.html",
    "title": "Listing Example",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nAuthor\n\n\n\n\n\n\n\n\nMedian of 2 sorted lists\n\n\n \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "lib/src/katapult/project_template/{{cookiecutter.project_slug}}/nbk/reports/med_2_sorted_lists_3.html",
    "href": "lib/src/katapult/project_template/{{cookiecutter.project_slug}}/nbk/reports/med_2_sorted_lists_3.html",
    "title": "Median of 2 sorted lists",
    "section": "",
    "text": "from pydantic import BaseModel\nimport numpy as np\nimport pandas as pd\n\n\ndef pad(x):\n    return [-float(\"inf\")] + x + [float(\"inf\")]\n\nclass Pointers():\n    def __init__(self, high, target, low):\n        self.high = high\n        self.target = target\n        self.low = low\n\nclass BorderValues():\n    def __init__(self, max_low, min_high):\n        self.max_low = max_low\n        self.min_high = min_high\n\nclass OrderedList:\n    def __init__(self, nums, target=None):\n        self.list = nums\n        self.padded_list = pad(nums)\n        self.n = len(self.padded_list)\n        self.search_idx = Pointers(low=0, target=self.n // 2, high=self.n)\n        # override target if given\n        if target != None:\n            self.set_target(target)\n        else:\n            self.set_border_values()\n\n    def set_target(self, target):\n        self.search_idx.target = target\n        self.set_border_values()\n        \n    def set_border_values(self):\n        self.split = BorderValues(\n            max_low=self.padded_list[self.search_idx.target - 1], \n            min_high=self.padded_list[self.search_idx.target],\n        )\n        \n    def next_target(self, up=True):\n        if up:\n            self.search_idx.low = self.search_idx.target\n        else:\n            self.search_idx.high = self.search_idx.target\n        self.search_idx.target = (self.search_idx.low + self.search_idx.high) // 2\n        self.set_border_values()\n\n    def __repr__(self):\n        return str(self.list)\n        \ndef find_median(a, b, target_index):\n    a_lower_lte_b_upper = a.split.max_low &lt;= b.split.min_high\n    b_lower_lte_a_upper = b.split.max_low &lt;= a.split.min_high\n    \n    if not a_lower_lte_b_upper:\n        a.next_target(up=False)\n        b.search_idx.target = target_index - a.search_idx.target\n        b.set_border_values()\n        a, b = find_median(a, b, target_index)\n    elif not b_lower_lte_a_upper:\n        a.next_target(up=True)\n        b.search_idx.target = target_index - a.search_idx.target\n        b.set_border_values()\n        a, b = find_median(a, b, target_index)\n        \n    return a, b\n    \ndef calculate_median(a, b):\n    n = a.n + b.n\n    max_low = max(a.split.max_low, b.split.max_low)\n    min_high = min(a.split.min_high, b.split.min_high)\n    #print(median_input_values)\n    if n % 2 == 0:\n        med = (max_low + min_high) / 2.0\n    else:\n        med = min_high\n        \n    return med\n    \ndef main(nums1, nums2):\n    a, b = OrderedList(nums1), OrderedList(nums2)\n    # make sure a contains the shorter list\n    a, b = (a, b) if a.n &lt;= b.n else (b, a)\n    target_index = (a.n + b.n) // 2\n    b.set_target(target_index - a.search_idx.target)\n    a, b = find_median(a, b, target_index)\n    med = calculate_median(a, b)\n    return a, b, med\n\n\ndef highlight_ol(ol: OrderedList):\n    green_cols = list(range(ol.search_idx.low, ol.search_idx.target))\n    blue_cols = list(range(ol.search_idx.target, ol.search_idx.high))\n    s = (\n        pd.Series(ol.padded_list).to_frame().T\n        .style\n        .set_properties(subset=green_cols, **{\"background-color\": \"lightgreen\"})\n        .set_properties(subset=blue_cols, **{\"background-color\": \"lightblue\"})\n    )\n    return s\n\n\noverride_a = False\noverride_b = False\n\nna_ = np.random.randint(1, 100)\nnb_ = np.random.randint(1, 100)\n\na_ = np.random.randint(0, 60, na_).tolist()\na_.sort()\n\n# override a\n#override_a = True\nif override_a:\n    a_ = [1]\n    na_ = len(a_)\n\nb_ = np.random.randint(40, 100, nb_).tolist()\nb_.sort()\n\n# override b\n#override_b = True\nif override_b:\n    b_ = [1]\n    nb_ = len(b_)\n\nc_ = np.concat([a_, b_]).astype(int).tolist()\nc_.sort()\nn_ = len(c_)\nmed_calc = np.median(c_)\n\ndisplay(highlight_ol(OrderedList(c_)))\nprint(f\"calculated median = {med_calc}\")\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n\n\n\n\n0\n-inf\n0.000000\n0.000000\n0.000000\n1.000000\n3.000000\n3.000000\n4.000000\n5.000000\n7.000000\n7.000000\n7.000000\n8.000000\n8.000000\n8.000000\n8.000000\n10.000000\n11.000000\n11.000000\n12.000000\n14.000000\n15.000000\n16.000000\n17.000000\n17.000000\n17.000000\n18.000000\n18.000000\n18.000000\n20.000000\n21.000000\n21.000000\n22.000000\n22.000000\n23.000000\n25.000000\n26.000000\n27.000000\n27.000000\n28.000000\n31.000000\n31.000000\n35.000000\n35.000000\n36.000000\n37.000000\n37.000000\n39.000000\n40.000000\n40.000000\n41.000000\n41.000000\n41.000000\n41.000000\n42.000000\n42.000000\n42.000000\n42.000000\n42.000000\n43.000000\n43.000000\n43.000000\n44.000000\n44.000000\n45.000000\n46.000000\n46.000000\n46.000000\n47.000000\n48.000000\n48.000000\n48.000000\n48.000000\n49.000000\n49.000000\n50.000000\n51.000000\n51.000000\n51.000000\n52.000000\n52.000000\n52.000000\n52.000000\n53.000000\n53.000000\n54.000000\n54.000000\n54.000000\n55.000000\n55.000000\n55.000000\n56.000000\n57.000000\n57.000000\n57.000000\n57.000000\n57.000000\n58.000000\n58.000000\n58.000000\n60.000000\n60.000000\n61.000000\n62.000000\n63.000000\n64.000000\n64.000000\n65.000000\n66.000000\n66.000000\n67.000000\n68.000000\n68.000000\n69.000000\n69.000000\n70.000000\n70.000000\n70.000000\n70.000000\n71.000000\n71.000000\n74.000000\n74.000000\n74.000000\n76.000000\n76.000000\n77.000000\n79.000000\n79.000000\n79.000000\n79.000000\n80.000000\n80.000000\n81.000000\n83.000000\n84.000000\n84.000000\n84.000000\n87.000000\n87.000000\n91.000000\n92.000000\n93.000000\n93.000000\n94.000000\n94.000000\n94.000000\n95.000000\n95.000000\n95.000000\n96.000000\ninf\n\n\n\n\n\ncalculated median = 50.5\n\n\n\na, b, med = main(a_, b_)\ntry:\n    display(highlight_ol(a))\n    display(highlight_ol(b))\nexcept:\n    pass\nfinally:\n    display(med)\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\n\n\n0\n-inf\n0.000000\n0.000000\n0.000000\n1.000000\n3.000000\n3.000000\n4.000000\n5.000000\n7.000000\n7.000000\n7.000000\n8.000000\n8.000000\n8.000000\n8.000000\n10.000000\n11.000000\n11.000000\n12.000000\n14.000000\n15.000000\n16.000000\n17.000000\n17.000000\n17.000000\n18.000000\n18.000000\n18.000000\n20.000000\n21.000000\n21.000000\n22.000000\n22.000000\n23.000000\n25.000000\n26.000000\n27.000000\n27.000000\n28.000000\n31.000000\n31.000000\n35.000000\n35.000000\n36.000000\n37.000000\n37.000000\n39.000000\n40.000000\n40.000000\n41.000000\n42.000000\n43.000000\n43.000000\n44.000000\n46.000000\n46.000000\n47.000000\n48.000000\n51.000000\n51.000000\n54.000000\n54.000000\n55.000000\n55.000000\n57.000000\n57.000000\n57.000000\n58.000000\n58.000000\n58.000000\ninf\n\n\n\n\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n\n\n\n\n0\n-inf\n41.000000\n41.000000\n41.000000\n42.000000\n42.000000\n42.000000\n42.000000\n43.000000\n44.000000\n45.000000\n46.000000\n48.000000\n48.000000\n48.000000\n49.000000\n49.000000\n50.000000\n51.000000\n52.000000\n52.000000\n52.000000\n52.000000\n53.000000\n53.000000\n54.000000\n55.000000\n56.000000\n57.000000\n57.000000\n60.000000\n60.000000\n61.000000\n62.000000\n63.000000\n64.000000\n64.000000\n65.000000\n66.000000\n66.000000\n67.000000\n68.000000\n68.000000\n69.000000\n69.000000\n70.000000\n70.000000\n70.000000\n70.000000\n71.000000\n71.000000\n74.000000\n74.000000\n74.000000\n76.000000\n76.000000\n77.000000\n79.000000\n79.000000\n79.000000\n79.000000\n80.000000\n80.000000\n81.000000\n83.000000\n84.000000\n84.000000\n84.000000\n87.000000\n87.000000\n91.000000\n92.000000\n93.000000\n93.000000\n94.000000\n94.000000\n94.000000\n95.000000\n95.000000\n95.000000\n96.000000\ninf\n\n\n\n\n\n50.5\n\n\n\nprint(f\"calculated med == med: {med_calc == med}\")\n\ncalculated med == med: True"
  },
  {
    "objectID": "lib/src/katapult/project_template/{{cookiecutter.project_slug}}/nbk/wip/med_2_sorted_lists_1.html",
    "href": "lib/src/katapult/project_template/{{cookiecutter.project_slug}}/nbk/wip/med_2_sorted_lists_1.html",
    "title": "katapult",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nfrom pydantic import BaseModel\n\n\ndef highlight_greaterthan(value, threshold, color='yellow'):\n    \"\"\"Highlights cells greater than a threshold value.\"\"\"\n    if isinstance(value, (int, float)) and value &gt;= threshold:\n        return f'background-color: {color}'\n    return ''\n\ndef highlight_series(series, idx, color=\"green\"):\n    return (\n        series\n        .to_frame()\n        .T\n        .style\n        .map(lambda x: highlight_greaterthan(x, series[idx], color))\n    )\n\n# --------------------------------------------------------------------------------------\nclass Span(BaseModel):\n    low: int\n    high: int\n    \ndef get_split(span: Span):\n    n = span.high - span.low + 1\n    return span.low + n // 2\n    \n# --------------------------------------------------------------------------------------\ndef check_split(a, b, a_split, b_split, **kwargs):\n    # looking at split in 'a' ...\n    lower_split = bool(a[a_split - 1] &gt; b[b_split])\n    raise_split = bool(b[b_split - 1] &gt; a[a_split])\n    \n    is_valid = not (lower_split or raise_split)\n    \n    return dict(is_valid=is_valid, lower_split=lower_split, raise_split=raise_split)\n\ndef estimate_splits(a, b, a_split, b_split, a_span, status):\n    if status[\"lower_split\"]:\n        new_span = Span(low=a_span.low, high=a_split)\n    if status[\"raise_split\"]:\n        new_span = Span(low=a_split, high=a_span.high)\n    new_a_split = get_split(new_span)\n    new_b_split = b_split - (new_a_split - a_split)\n    return dict(\n        a_split = new_a_split, \n        b_split = new_b_split,\n        a_span = new_span,\n    )\n\n# --------------------------------------------------------------------------------------\ndef calculate_median(a, b, est):\n    n = len(a) + len(b)\n    a_split = est[\"a_split\"]\n    b_split = est[\"b_split\"]\n    if n % 2 == 0:\n        max_left = max(a[a_split - 1], b[b_split - 1])\n        min_right = min(a[a_split], b[b_split])\n        med = (max_left + min_right) / 2\n    else:\n        med = min(a[a_split], b[b_split])\n    return med\n\n\n\nna = np.random.randint(50, high=60)\nnb = np.random.randint(60, high=70)\nn = na + nb\n\na_range = Span(low=0, high=na - 1)\nb_range = Span(low=0, high=nb - 1)\ncombined_range = Span(low=0, high=n - 1)\n\nsplit_index = get_split(combined_range)\n\na_split = get_split(a_range)\nb_split = split_index - a_split\n\nprint(f\"{na}, {nb}, {n}\")\na_split, b_split, split_index\n\n54, 61, 115\n\n\n(27, 30, 57)\n\n\n\na = (\n    pd.Series(np.random.randint(0, high=100, size=na))\n    .sort_values()\n    .reset_index(drop=True)\n)\nb = (\n    pd.Series(np.random.randint(0, high=100, size=nb))\n    .sort_values()\n    .reset_index(drop=True)\n)\nest = {\"a_split\": a_split, \"b_split\": b_split, \"a_span\": a_range}\n\n\nhave a, b, initial_splits\nis split valid?\nyes: done\nno: estimate_splits\ngoto is split valid?\n\n\ndisplay(a.pipe(highlight_series, get_split(a_range), \"lightgreen\"))\ndisplay(b.pipe(highlight_series, get_split(b_range), \"lightblue\"))\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n\n0\n1\n2\n3\n7\n8\n10\n10\n13\n14\n14\n16\n17\n23\n31\n37\n37\n38\n40\n40\n42\n44\n50\n52\n53\n54\n55\n56\n58\n60\n63\n64\n64\n67\n67\n67\n68\n69\n70\n71\n73\n73\n74\n76\n78\n79\n79\n83\n85\n89\n92\n95\n96\n98\n98\n\n\n\n\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n\n0\n0\n1\n5\n5\n7\n7\n9\n10\n14\n17\n18\n21\n23\n29\n31\n32\n34\n36\n39\n40\n41\n42\n44\n44\n45\n45\n47\n51\n52\n55\n55\n58\n59\n60\n61\n62\n65\n65\n65\n69\n69\n69\n72\n72\n72\n73\n74\n74\n76\n78\n84\n85\n85\n85\n87\n87\n90\n93\n94\n94\n96\n\n\n\n\n\n\nc = (\n    pd.concat([a, b], ignore_index=True)\n    .sort_values()\n    .reset_index(drop=True)\n)\ndisplay(c.pipe(highlight_series, split_index, \"aqua\"))\nmed_from_sorted = c.median()\nprint(f\"median = {med_from_sorted}\")\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n\n\n\n\n0\n0\n1\n1\n2\n3\n5\n5\n7\n7\n7\n8\n9\n10\n10\n10\n13\n14\n14\n14\n16\n17\n17\n18\n21\n23\n23\n29\n31\n31\n32\n34\n36\n37\n37\n38\n39\n40\n40\n40\n41\n42\n42\n44\n44\n44\n45\n45\n47\n50\n51\n52\n52\n53\n54\n55\n55\n55\n56\n58\n58\n59\n60\n60\n61\n62\n63\n64\n64\n65\n65\n65\n67\n67\n67\n68\n69\n69\n69\n69\n70\n71\n72\n72\n72\n73\n73\n73\n74\n74\n74\n76\n76\n78\n78\n79\n79\n83\n84\n85\n85\n85\n85\n87\n87\n89\n90\n92\n93\n94\n94\n95\n96\n96\n98\n98\n\n\n\n\n\nmedian = 56.0\n\n\n\nsplit_status = check_split(a, b, **est)\nsplit_status\n\n\nprint(est)\nprint(split_status)\nprint(\"-\" * 100)\n\nwhile not split_status[\"is_valid\"]:\n    est = estimate_splits(a, b, **est, status=split_status)\n    print(est)\n    split_status = check_split(a, b, **est)\n    print(split_status)\n    print(\"-\" * 100)\n    \ndisplay(a.pipe(highlight_series, est[\"a_split\"], \"lightgreen\"))\ndisplay(b.pipe(highlight_series, est[\"b_split\"], \"lightblue\"))\n\n\nmed_from_algo = calculate_median(a, b, est)\nprint(f\"median: {med_from_algo} == {med_from_sorted} -&gt; {med_from_algo == med_from_sorted}\")\n\nFirst check: 1) \\(\\max(A_{lower}) \\le \\min(B_{upper})\\) 1) \\(\\max(B_{lower}) \\le \\min(A_{upper})\\)\nif (1) and (2) and n is even then median = \\(\\text{med}(\\text{sorted}(\\max(A_{lower}), \\max(B_{lower}), \\min(A_{upper}), \\min(B_{upper}))\\)\nif (1) and not (2):\n\\(A_{lower}\n  \\begin{cases}\n    \\leq A_{upper} \\\\\n    \\leq B_{upper}\n  \\end{cases}\\)\nand\n\\(B_{upper}\n  \\begin{cases}\n    \\geq A_{lower} \\\\\n    \\geq B_{lower}\n  \\end{cases}\\)\nso we can eliminate \\(A_{lower}\\) and \\(B_{upper}\\) from consideration.\nif (2) and not (1):\n\\(B_{lower}\n  \\begin{cases}\n    \\leq A_{upper} \\\\\n    \\leq B_{upper}\n  \\end{cases}\\)\nand\n\\(A_{upper}\n  \\begin{cases}\n    \\geq A_{lower} \\\\\n    \\geq B_{lower}\n  \\end{cases}\\)\nso we can eliminate \\(A_{upper}\\) and \\(B_{lower}\\) from consideration."
  }
]