[
  {
    "objectID": "nbk/docs/usage.html",
    "href": "nbk/docs/usage.html",
    "title": "Usage",
    "section": "",
    "text": "Katapult can be used in different ways, but it has an opinion on the way most projects evolve.\nThe general project structure is shown here:\ncontent\n├── LICENSE.md\n├── README.md\n├── _quarto.yml\n├── api\n├── app\n├── assets\n├── build\n├── docs\n├── lib\n├── nbk\n└── srv\n\n9 directories, 3 files\n\n\n\nFigure 1"
  },
  {
    "objectID": "nbk/docs/usage.html#jupyterlab",
    "href": "nbk/docs/usage.html#jupyterlab",
    "title": "Usage",
    "section": "JupyterLab",
    "text": "JupyterLab\nThe most basic usage is to just use the JupyterLab server which can be found by going to the project root and using the Services link.\nDependencies are managed with uv and can be modified is several different ways:\n\nAdd dependencies from JupyterLab terminal\nThe primary components of the nbk/ directory are shown here:\n\n\n\n\nnbk/\n├── docs/\n├── pyproject.toml\n├── reports/\n├── uv.lock\n└── wip/\n\n4 directories, 3 files\n\n\n\nFigure 2\n\n\n\nLaunching a terminal from JupyterLab will give you a command prompt running from within the container. JupyterLab dependencies are controlled in the nbk/ directory (see figure above).\nTo add a dependency simply run (from within the nbk/ directory):\nuv add xarray # for example\nDependencies are saved in the pyproject.toml and uv.lock files. See uv documentation for more information.\n\n\nAdd dependencies using katx connect\nYou can also get a terminal in the container using katx.\nFrom within your project directory run katx connect.\nChange to your notebook (nbk) directory and use uv as described above.\n\n\nPublishing notebooks\nBy default, three of the directories have special purposes:\n\ndocs/\nNotebooks in the docs/ directory (e.g. this document) are intended to be used in the general project documentation and referenced from the documentation.qmd file in the srv/ directory.\nreport/\nNotebooks in the reports/ directory are stand alone documents that you can share with other people. They will automatically appear here, and can be downloaded as standalone html files.\nwip/ Notebooks in the wip/ directory are stand alone documents that are under development. As such, they are shareable if you know the link, but not discoverable when browsing the project website. For example, this document is available through the given link, but you will not find it while browsing.\n\nFor more information about publishing, refer to the Quarto section."
  },
  {
    "objectID": "nbk/docs/usage.html#creating-a-python-library",
    "href": "nbk/docs/usage.html#creating-a-python-library",
    "title": "Usage",
    "section": "Creating a python library",
    "text": "Creating a python library\n\nExploration\nTypically, projects start in an exploration / experimentation phase. A great tool for this is a Jupyter Notebook.\n\n# Let's try adding some numbers\n1 + 5\n\n6\n\n\n\n\nRefactor\nAs you project evolves, you can refactor your notebook code into functions.\n\ndef add(a, b):\n    return a + b\n\nadd(1, 5)\n\n6\n\n\n\n\nLibrary\nAs your functions stabilize you can pull those into the library directory (lib). As an example of this we can see the calculations.py file in the lib directory.\n\n\nlib/src/katapult/calculations.py:\n\"\"\"Provide several sample math calculations.\n\nThis module allows the user to make mathematical calculations.\n\nExamples:\n    &gt;&gt;&gt; from calculator import calculations\n    &gt;&gt;&gt; calculations.add(2, 4)\n    6.0\n    &gt;&gt;&gt; calculations.multiply(2.0, 4.0)\n    8.0\n    &gt;&gt;&gt; from calculator.calculations import divide\n    &gt;&gt;&gt; divide(4.0, 2)\n    2.0\n\nThe module contains the following functions:\n\n- `add(a, b)` - Returns the sum of two numbers.\n- `subtract(a, b)` - Returns the difference of two numbers.\n- `multiply(a, b)` - Returns the product of two numbers.\n- `divide(a, b)` - Returns the quotient of two numbers.\n\"\"\"\n\n\nfrom typing import Union\n\ndef add(a: Union[float, int], b: Union[float, int]) -&gt; float:\n    \"\"\"Compute and return the sum of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; add(4.0, 2.0)\n        6.0\n        &gt;&gt;&gt; add(4, 2)\n        6.0\n\n    Args:\n        a: A number representing the first addend in the addition.\n        b: A number representing the second addend in the addition.\n\n    Returns:\n        A number representing the arithmetic sum of `a` and `b`.\n    \"\"\"\n    return float(a + b)\n\ndef subtract(a: Union[float, int], b: Union[float, int]) -&gt; float:\n    \"\"\"Calculate the difference of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; subtract(4.0, 2.0)\n        2.0\n        &gt;&gt;&gt; subtract(4, 2)\n        2.0\n\n    Args:\n        a: A number representing the minuend in the subtraction.\n        b: A number representing the subtrahend in the subtraction.\n\n    Returns:\n        A number representing the difference between `a` and `b`.\n    \"\"\"\n    return float(a - b)\n\ndef multiply(a: Union[float, int], b: Union[float, int]) -&gt; float:\n    \"\"\"Compute and return the product of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; multiply(4.0, 2.0)\n        8.0\n        &gt;&gt;&gt; multiply(4, 2)\n        8.0\n\n    Args:\n        a: A number representing the multiplicand in the multiplication.\n        b: A number representing the multiplier in the multiplication.\n\n    Returns:\n        A number representing the product of `a` and `b`.\n    \"\"\"\n    return float(a * b)\n\ndef divide(a: Union[float, int], b: Union[float, int]) -&gt; float:\n    \"\"\"Compute and return the quotient of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; divide(4.0, 2.0)\n        2.0\n        &gt;&gt;&gt; divide(4, 2)\n        2.0\n        &gt;&gt;&gt; divide(4, 0)\n        Traceback (most recent call last):\n        ...\n        ZeroDivisionError: division by zero\n\n    Args:\n        a: A number representing the dividend in the division.\n        b: A number representing the divisor in the division.\n\n    Returns:\n        A number representing the quotient of `a` and `b`.\n\n    Raises:\n        ZeroDivisionError: An error occurs when the divisor is `0`.\n    \"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return float(a / b)\n\n\n\n\nDocumentation\nDon’t forget to add docstrings to your modules and functions (as seen above).\nWith the docstrings in place you can use pdoc to auto-generate the code documentation.\nThis can be done in two different ways:\n- from your project directory (not in a container shell) run katx render (RECOMMENDED) - from a shell within the container (katx connect) by running uvx --with lib/. pdoc -o docs/lib katapult from /content\nYou can see the result here.\nFor more information see documentation for both uvx and pdoc.\n\n\nInstall\nWe can install the library from the container command line with:\n\n# from /content/nbk\n!uv add ../lib/.\n\n\nResolved 124 packages in 3ms                                         \n\nPrepared 1 package in 412ms                                              \n\nUninstalled 1 package in 17ms\n\nInstalled 1 package in 13msm file:///content/lib)           \n\nBytecode compiled 5128 files in 889ms\n\n ~ katapult==0.1.0 (from file:///content/lib)\n\n\n\n\n\nfrom katapult import calculations\n\ncalculations.add(1, 5)\n\n6.0\n\n\nThis project can be pushed to github and the library can be installed by specifying the subdirectory. For example:\npip install \"git+https://github.com/ajp619/katapult#subdirectory=lib\""
  },
  {
    "objectID": "nbk/docs/usage.html#quarto",
    "href": "nbk/docs/usage.html#quarto",
    "title": "Usage",
    "section": "Quarto",
    "text": "Quarto"
  },
  {
    "objectID": "nbk/reports/med_2_sorted_lists_3.html",
    "href": "nbk/reports/med_2_sorted_lists_3.html",
    "title": "Median of 2 sorted lists",
    "section": "",
    "text": "from pydantic import BaseModel\nimport numpy as np\nimport pandas as pd\n\n\n\n\n\ndef pad(x):\n    return [-float(\"inf\")] + x + [float(\"inf\")]\n\nclass Pointers():\n    def __init__(self, high, target, low):\n        self.high = high\n        self.target = target\n        self.low = low\n\nclass BorderValues():\n    def __init__(self, max_low, min_high):\n        self.max_low = max_low\n        self.min_high = min_high\n\nclass OrderedList:\n    def __init__(self, nums, target=None):\n        self.list = nums\n        self.padded_list = pad(nums)\n        self.n = len(self.padded_list)\n        self.search_idx = Pointers(low=0, target=self.n // 2, high=self.n)\n        # override target if given\n        if target != None:\n            self.set_target(target)\n        else:\n            self.set_border_values()\n\n    def set_target(self, target):\n        self.search_idx.target = target\n        self.set_border_values()\n        \n    def set_border_values(self):\n        self.split = BorderValues(\n            max_low=self.padded_list[self.search_idx.target - 1], \n            min_high=self.padded_list[self.search_idx.target],\n        )\n        \n    def next_target(self, up=True):\n        if up:\n            self.search_idx.low = self.search_idx.target\n        else:\n            self.search_idx.high = self.search_idx.target\n        self.search_idx.target = (self.search_idx.low + self.search_idx.high) // 2\n        self.set_border_values()\n\n    def __repr__(self):\n        return str(self.list)\n        \ndef find_median(a, b, target_index):\n    a_lower_lte_b_upper = a.split.max_low &lt;= b.split.min_high\n    b_lower_lte_a_upper = b.split.max_low &lt;= a.split.min_high\n    \n    if not a_lower_lte_b_upper:\n        a.next_target(up=False)\n        b.search_idx.target = target_index - a.search_idx.target\n        b.set_border_values()\n        a, b = find_median(a, b, target_index)\n    elif not b_lower_lte_a_upper:\n        a.next_target(up=True)\n        b.search_idx.target = target_index - a.search_idx.target\n        b.set_border_values()\n        a, b = find_median(a, b, target_index)\n        \n    return a, b\n    \ndef calculate_median(a, b):\n    n = a.n + b.n\n    max_low = max(a.split.max_low, b.split.max_low)\n    min_high = min(a.split.min_high, b.split.min_high)\n    #print(median_input_values)\n    if n % 2 == 0:\n        med = (max_low + min_high) / 2.0\n    else:\n        med = min_high\n        \n    return med\n    \ndef main(nums1, nums2):\n    a, b = OrderedList(nums1), OrderedList(nums2)\n    # make sure a contains the shorter list\n    a, b = (a, b) if a.n &lt;= b.n else (b, a)\n    target_index = (a.n + b.n) // 2\n    b.set_target(target_index - a.search_idx.target)\n    a, b = find_median(a, b, target_index)\n    med = calculate_median(a, b)\n    return a, b, med\n\n\ndef highlight_ol(ol: OrderedList):\n    green_cols = list(range(ol.search_idx.low, ol.search_idx.target))\n    blue_cols = list(range(ol.search_idx.target, ol.search_idx.high))\n    s = (\n        pd.Series(ol.padded_list).to_frame().T\n        .style\n        .set_properties(subset=green_cols, **{\"background-color\": \"lightgreen\"})\n        .set_properties(subset=blue_cols, **{\"background-color\": \"lightblue\"})\n    )\n    return s\n\n\noverride_a = False\noverride_b = False\n\nna_ = np.random.randint(1, 100)\nnb_ = np.random.randint(1, 100)\n\na_ = np.random.randint(0, 60, na_).tolist()\na_.sort()\n\n# override a\n#override_a = True\nif override_a:\n    a_ = [1]\n    na_ = len(a_)\n\nb_ = np.random.randint(40, 100, nb_).tolist()\nb_.sort()\n\n# override b\n#override_b = True\nif override_b:\n    b_ = [1]\n    nb_ = len(b_)\n\nc_ = np.concat([a_, b_]).astype(int).tolist()\nc_.sort()\nn_ = len(c_)\nmed_calc = np.median(c_)\n\ndisplay(highlight_ol(OrderedList(c_)))\nprint(f\"calculated median = {med_calc}\")\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n\n\n\n\n0\n-inf\n2.000000\n4.000000\n9.000000\n9.000000\n10.000000\n11.000000\n11.000000\n12.000000\n12.000000\n17.000000\n17.000000\n18.000000\n18.000000\n19.000000\n20.000000\n22.000000\n23.000000\n30.000000\n32.000000\n32.000000\n32.000000\n33.000000\n36.000000\n38.000000\n38.000000\n39.000000\n40.000000\n40.000000\n41.000000\n42.000000\n42.000000\n42.000000\n43.000000\n43.000000\n43.000000\n43.000000\n44.000000\n44.000000\n44.000000\n45.000000\n45.000000\n46.000000\n47.000000\n49.000000\n50.000000\n52.000000\n53.000000\n53.000000\n54.000000\n54.000000\n54.000000\n55.000000\n55.000000\n57.000000\n57.000000\n58.000000\n58.000000\n58.000000\n58.000000\n60.000000\n60.000000\n61.000000\n67.000000\n67.000000\n69.000000\n70.000000\n71.000000\n74.000000\n74.000000\n75.000000\n75.000000\n76.000000\n77.000000\n77.000000\n78.000000\n78.000000\n82.000000\n82.000000\n84.000000\n86.000000\n88.000000\n90.000000\n91.000000\n96.000000\ninf\n\n\n\n\n\ncalculated median = 46.5\n\n\n\na, b, med = main(a_, b_)\ntry:\n    display(highlight_ol(a))\n    display(highlight_ol(b))\nexcept:\n    pass\nfinally:\n    display(med)\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n\n0\n-inf\n2.000000\n4.000000\n9.000000\n9.000000\n10.000000\n11.000000\n11.000000\n12.000000\n12.000000\n17.000000\n17.000000\n18.000000\n18.000000\n19.000000\n20.000000\n22.000000\n23.000000\n30.000000\n32.000000\n32.000000\n32.000000\n33.000000\n36.000000\n38.000000\n38.000000\n39.000000\n43.000000\n43.000000\n43.000000\n44.000000\n44.000000\n45.000000\n47.000000\n52.000000\n53.000000\n53.000000\n54.000000\n54.000000\n54.000000\n55.000000\n55.000000\n57.000000\ninf\n\n\n\n\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n\n0\n-inf\n40.000000\n40.000000\n41.000000\n42.000000\n42.000000\n42.000000\n43.000000\n44.000000\n45.000000\n46.000000\n49.000000\n50.000000\n57.000000\n58.000000\n58.000000\n58.000000\n58.000000\n60.000000\n60.000000\n61.000000\n67.000000\n67.000000\n69.000000\n70.000000\n71.000000\n74.000000\n74.000000\n75.000000\n75.000000\n76.000000\n77.000000\n77.000000\n78.000000\n78.000000\n82.000000\n82.000000\n84.000000\n86.000000\n88.000000\n90.000000\n91.000000\n96.000000\ninf\n\n\n\n\n\n46.5\n\n\n\nprint(f\"calculated med == med: {med_calc == med}\")\n\ncalculated med == med: True"
  },
  {
    "objectID": "nbk/reports/med_2_sorted_lists_3.html#setup",
    "href": "nbk/reports/med_2_sorted_lists_3.html#setup",
    "title": "Median of 2 sorted lists",
    "section": "",
    "text": "from pydantic import BaseModel\nimport numpy as np\nimport pandas as pd\n\n\n\n\n\ndef pad(x):\n    return [-float(\"inf\")] + x + [float(\"inf\")]\n\nclass Pointers():\n    def __init__(self, high, target, low):\n        self.high = high\n        self.target = target\n        self.low = low\n\nclass BorderValues():\n    def __init__(self, max_low, min_high):\n        self.max_low = max_low\n        self.min_high = min_high\n\nclass OrderedList:\n    def __init__(self, nums, target=None):\n        self.list = nums\n        self.padded_list = pad(nums)\n        self.n = len(self.padded_list)\n        self.search_idx = Pointers(low=0, target=self.n // 2, high=self.n)\n        # override target if given\n        if target != None:\n            self.set_target(target)\n        else:\n            self.set_border_values()\n\n    def set_target(self, target):\n        self.search_idx.target = target\n        self.set_border_values()\n        \n    def set_border_values(self):\n        self.split = BorderValues(\n            max_low=self.padded_list[self.search_idx.target - 1], \n            min_high=self.padded_list[self.search_idx.target],\n        )\n        \n    def next_target(self, up=True):\n        if up:\n            self.search_idx.low = self.search_idx.target\n        else:\n            self.search_idx.high = self.search_idx.target\n        self.search_idx.target = (self.search_idx.low + self.search_idx.high) // 2\n        self.set_border_values()\n\n    def __repr__(self):\n        return str(self.list)\n        \ndef find_median(a, b, target_index):\n    a_lower_lte_b_upper = a.split.max_low &lt;= b.split.min_high\n    b_lower_lte_a_upper = b.split.max_low &lt;= a.split.min_high\n    \n    if not a_lower_lte_b_upper:\n        a.next_target(up=False)\n        b.search_idx.target = target_index - a.search_idx.target\n        b.set_border_values()\n        a, b = find_median(a, b, target_index)\n    elif not b_lower_lte_a_upper:\n        a.next_target(up=True)\n        b.search_idx.target = target_index - a.search_idx.target\n        b.set_border_values()\n        a, b = find_median(a, b, target_index)\n        \n    return a, b\n    \ndef calculate_median(a, b):\n    n = a.n + b.n\n    max_low = max(a.split.max_low, b.split.max_low)\n    min_high = min(a.split.min_high, b.split.min_high)\n    #print(median_input_values)\n    if n % 2 == 0:\n        med = (max_low + min_high) / 2.0\n    else:\n        med = min_high\n        \n    return med\n    \ndef main(nums1, nums2):\n    a, b = OrderedList(nums1), OrderedList(nums2)\n    # make sure a contains the shorter list\n    a, b = (a, b) if a.n &lt;= b.n else (b, a)\n    target_index = (a.n + b.n) // 2\n    b.set_target(target_index - a.search_idx.target)\n    a, b = find_median(a, b, target_index)\n    med = calculate_median(a, b)\n    return a, b, med\n\n\ndef highlight_ol(ol: OrderedList):\n    green_cols = list(range(ol.search_idx.low, ol.search_idx.target))\n    blue_cols = list(range(ol.search_idx.target, ol.search_idx.high))\n    s = (\n        pd.Series(ol.padded_list).to_frame().T\n        .style\n        .set_properties(subset=green_cols, **{\"background-color\": \"lightgreen\"})\n        .set_properties(subset=blue_cols, **{\"background-color\": \"lightblue\"})\n    )\n    return s\n\n\noverride_a = False\noverride_b = False\n\nna_ = np.random.randint(1, 100)\nnb_ = np.random.randint(1, 100)\n\na_ = np.random.randint(0, 60, na_).tolist()\na_.sort()\n\n# override a\n#override_a = True\nif override_a:\n    a_ = [1]\n    na_ = len(a_)\n\nb_ = np.random.randint(40, 100, nb_).tolist()\nb_.sort()\n\n# override b\n#override_b = True\nif override_b:\n    b_ = [1]\n    nb_ = len(b_)\n\nc_ = np.concat([a_, b_]).astype(int).tolist()\nc_.sort()\nn_ = len(c_)\nmed_calc = np.median(c_)\n\ndisplay(highlight_ol(OrderedList(c_)))\nprint(f\"calculated median = {med_calc}\")\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n\n\n\n\n0\n-inf\n2.000000\n4.000000\n9.000000\n9.000000\n10.000000\n11.000000\n11.000000\n12.000000\n12.000000\n17.000000\n17.000000\n18.000000\n18.000000\n19.000000\n20.000000\n22.000000\n23.000000\n30.000000\n32.000000\n32.000000\n32.000000\n33.000000\n36.000000\n38.000000\n38.000000\n39.000000\n40.000000\n40.000000\n41.000000\n42.000000\n42.000000\n42.000000\n43.000000\n43.000000\n43.000000\n43.000000\n44.000000\n44.000000\n44.000000\n45.000000\n45.000000\n46.000000\n47.000000\n49.000000\n50.000000\n52.000000\n53.000000\n53.000000\n54.000000\n54.000000\n54.000000\n55.000000\n55.000000\n57.000000\n57.000000\n58.000000\n58.000000\n58.000000\n58.000000\n60.000000\n60.000000\n61.000000\n67.000000\n67.000000\n69.000000\n70.000000\n71.000000\n74.000000\n74.000000\n75.000000\n75.000000\n76.000000\n77.000000\n77.000000\n78.000000\n78.000000\n82.000000\n82.000000\n84.000000\n86.000000\n88.000000\n90.000000\n91.000000\n96.000000\ninf\n\n\n\n\n\ncalculated median = 46.5\n\n\n\na, b, med = main(a_, b_)\ntry:\n    display(highlight_ol(a))\n    display(highlight_ol(b))\nexcept:\n    pass\nfinally:\n    display(med)\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n\n0\n-inf\n2.000000\n4.000000\n9.000000\n9.000000\n10.000000\n11.000000\n11.000000\n12.000000\n12.000000\n17.000000\n17.000000\n18.000000\n18.000000\n19.000000\n20.000000\n22.000000\n23.000000\n30.000000\n32.000000\n32.000000\n32.000000\n33.000000\n36.000000\n38.000000\n38.000000\n39.000000\n43.000000\n43.000000\n43.000000\n44.000000\n44.000000\n45.000000\n47.000000\n52.000000\n53.000000\n53.000000\n54.000000\n54.000000\n54.000000\n55.000000\n55.000000\n57.000000\ninf\n\n\n\n\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n\n0\n-inf\n40.000000\n40.000000\n41.000000\n42.000000\n42.000000\n42.000000\n43.000000\n44.000000\n45.000000\n46.000000\n49.000000\n50.000000\n57.000000\n58.000000\n58.000000\n58.000000\n58.000000\n60.000000\n60.000000\n61.000000\n67.000000\n67.000000\n69.000000\n70.000000\n71.000000\n74.000000\n74.000000\n75.000000\n75.000000\n76.000000\n77.000000\n77.000000\n78.000000\n78.000000\n82.000000\n82.000000\n84.000000\n86.000000\n88.000000\n90.000000\n91.000000\n96.000000\ninf\n\n\n\n\n\n46.5\n\n\n\nprint(f\"calculated med == med: {med_calc == med}\")\n\ncalculated med == med: True"
  },
  {
    "objectID": "srv/reports.html",
    "href": "srv/reports.html",
    "title": "Listing Example",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nAuthor\n\n\n\n\n\n\n\n\nMedian of 2 sorted lists\n\n\n \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "README.html",
    "href": "README.html",
    "title": "Katapult",
    "section": "",
    "text": "Katapult creates an isolated development environment that can be configured to include a JupyterHub server, a Quart api service, a fasthtml webapp, and the template for a python library. In addition, Quarto is used to create static websites that integrate easily with github pages and provide downloadable html files of jupyter notebooks.\nview on github pages\n\n\nKatapult creates an isolated environment for each project that is easily portable from your laptop to any network infrastructure. It provides a single container that has the following tools:\n\nJupyterHub: Explore data, prototype transformations and models, and make publishable reports.\nQuart: Create an api that allows programmatic access to information generated by your service.\nfasthtml: Create dashboards and tools to help others gain insight from your work.\nQuarto: Publish stand alone, interactive reports that can be downloaded and distributed in various formats. Create project documentation using Markdown and Jupyter.\n\nIt takes an opinionated view of the typical development process and provides many convenience functions to facilitate this process.\n\n\n\n\n\n\n*nix environment (e.g. linux, macOS). On Windows use wsl2.\ndocker\nPython 3.12\npipx\n\n\n\n\nInstall from github:\npipx install \"git+https://github.com/ajp619/katapult#subdirectory=lib\"\nEnable katx (see Help):\nkat config\nLaunch entry point container:\nkat hub\n\n\n\nCreate a new project from the katapult template with:\nkat init\nEnter the project name and accept the rest of the defaults. This will create a new directory for your project.\nChange to the new project directory and use:\nkatx run\nThis will build the container, launch it, render the static content, and show you the status of the services.\nYou can now access the container at http://localhost/&lt;project name&gt;\n\n\n\n\nThere are two commands: kat and katx.\nkat is for managing high level concerns such as creating projects and creating the hub container that allows you to access all of your projects as path extensions (e.g. http://localhost/&lt;project name&gt;).\nTo get help use:\nkat --help\nkatx is for managing the each individual project.\nTo enable katx use:\nkat config\nThis will add code to your .bashrc file that will dynamically add katx to your path when you enter a project directory. (See Dynamic Path Updates).\nTo get help with katx use:\nkatx --help\nwhile in the project directory (or any subfolder).\n\n\n\n\n0.1\n\nInitial Release\n\n\n\n\n\nThis project is licensed under the MIT License - see the LICENSE.md file for details\n\n\n\n\n\n# Section added by katapult to dynamically add katx to path based on project\n# Intended to be added to .bashrc\n#\nRAW_PATH=\"$PATH\"\nLAST_WD=`pwd`\n\naugment_path() {\n    target=\".katapult\"\n    if [ \"$PWD\" = \"$LAST_WD\" ]; then return 0; fi;\n    PATH_ADDITION=\"\"\n    scandir=\"$PWD\"\n    until [ \"$scandir\" = \"\" ]; do\n    resolved_target=\"$scandir\"/\"$target\"\n    if [ -d \"$resolved_target\" ]; then\n        PATH_ADDITION=\"$PATH_ADDITION:$resolved_target\"\n    fi\n    scandir=\"${scandir%/*}\"\n    done\n    PATH=\"$PATH_ADDITION:$RAW_PATH\"\n    LAST_WD=`pwd`\n}\n\nif [ -z ${PROMPT_COMMAND+x} ]; then\n    # prompt not found\n    PROMPT_COMMAND=\"augment_path\"\nelse\n    # prompt found\n    PROMPT_COMMAND=\"$PROMPT_COMMAND; augment_path\"\nfi\n#\n# End of section generated by katapult"
  },
  {
    "objectID": "README.html#description",
    "href": "README.html#description",
    "title": "Katapult",
    "section": "",
    "text": "Katapult creates an isolated environment for each project that is easily portable from your laptop to any network infrastructure. It provides a single container that has the following tools:\n\nJupyterHub: Explore data, prototype transformations and models, and make publishable reports.\nQuart: Create an api that allows programmatic access to information generated by your service.\nfasthtml: Create dashboards and tools to help others gain insight from your work.\nQuarto: Publish stand alone, interactive reports that can be downloaded and distributed in various formats. Create project documentation using Markdown and Jupyter.\n\nIt takes an opinionated view of the typical development process and provides many convenience functions to facilitate this process."
  },
  {
    "objectID": "README.html#getting-started",
    "href": "README.html#getting-started",
    "title": "Katapult",
    "section": "",
    "text": "*nix environment (e.g. linux, macOS). On Windows use wsl2.\ndocker\nPython 3.12\npipx\n\n\n\n\nInstall from github:\npipx install \"git+https://github.com/ajp619/katapult#subdirectory=lib\"\nEnable katx (see Help):\nkat config\nLaunch entry point container:\nkat hub\n\n\n\nCreate a new project from the katapult template with:\nkat init\nEnter the project name and accept the rest of the defaults. This will create a new directory for your project.\nChange to the new project directory and use:\nkatx run\nThis will build the container, launch it, render the static content, and show you the status of the services.\nYou can now access the container at http://localhost/&lt;project name&gt;"
  },
  {
    "objectID": "README.html#help",
    "href": "README.html#help",
    "title": "Katapult",
    "section": "",
    "text": "There are two commands: kat and katx.\nkat is for managing high level concerns such as creating projects and creating the hub container that allows you to access all of your projects as path extensions (e.g. http://localhost/&lt;project name&gt;).\nTo get help use:\nkat --help\nkatx is for managing the each individual project.\nTo enable katx use:\nkat config\nThis will add code to your .bashrc file that will dynamically add katx to your path when you enter a project directory. (See Dynamic Path Updates).\nTo get help with katx use:\nkatx --help\nwhile in the project directory (or any subfolder)."
  },
  {
    "objectID": "README.html#version-history",
    "href": "README.html#version-history",
    "title": "Katapult",
    "section": "",
    "text": "0.1\n\nInitial Release"
  },
  {
    "objectID": "README.html#license",
    "href": "README.html#license",
    "title": "Katapult",
    "section": "",
    "text": "This project is licensed under the MIT License - see the LICENSE.md file for details"
  },
  {
    "objectID": "README.html#appendix",
    "href": "README.html#appendix",
    "title": "Katapult",
    "section": "",
    "text": "# Section added by katapult to dynamically add katx to path based on project\n# Intended to be added to .bashrc\n#\nRAW_PATH=\"$PATH\"\nLAST_WD=`pwd`\n\naugment_path() {\n    target=\".katapult\"\n    if [ \"$PWD\" = \"$LAST_WD\" ]; then return 0; fi;\n    PATH_ADDITION=\"\"\n    scandir=\"$PWD\"\n    until [ \"$scandir\" = \"\" ]; do\n    resolved_target=\"$scandir\"/\"$target\"\n    if [ -d \"$resolved_target\" ]; then\n        PATH_ADDITION=\"$PATH_ADDITION:$resolved_target\"\n    fi\n    scandir=\"${scandir%/*}\"\n    done\n    PATH=\"$PATH_ADDITION:$RAW_PATH\"\n    LAST_WD=`pwd`\n}\n\nif [ -z ${PROMPT_COMMAND+x} ]; then\n    # prompt not found\n    PROMPT_COMMAND=\"augment_path\"\nelse\n    # prompt found\n    PROMPT_COMMAND=\"$PROMPT_COMMAND; augment_path\"\nfi\n#\n# End of section generated by katapult"
  },
  {
    "objectID": "srv/documentation.html",
    "href": "srv/documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "A detailed guide to using katapult."
  },
  {
    "objectID": "srv/documentation.html#usage-overview",
    "href": "srv/documentation.html#usage-overview",
    "title": "Documentation",
    "section": "Usage overview",
    "text": "Usage overview\nGuide"
  },
  {
    "objectID": "srv/documentation.html#kat",
    "href": "srv/documentation.html#kat",
    "title": "Documentation",
    "section": "kat",
    "text": "kat"
  },
  {
    "objectID": "srv/documentation.html#katx",
    "href": "srv/documentation.html#katx",
    "title": "Documentation",
    "section": "katx",
    "text": "katx"
  },
  {
    "objectID": "srv/documentation.html#jupyterlab",
    "href": "srv/documentation.html#jupyterlab",
    "title": "Documentation",
    "section": "JupyterLab",
    "text": "JupyterLab\n\nHow to use\nWhere files are saved\nHow to manage dependencies\nFolders\n\ndocs\nreports\nwip"
  },
  {
    "objectID": "srv/documentation.html#api",
    "href": "srv/documentation.html#api",
    "title": "Documentation",
    "section": "API",
    "text": "API\n\nOverview\nHow to use\nWhere files are saved\nHow to manage dependencies\nHow to use in production\nHow to turn off"
  },
  {
    "objectID": "srv/documentation.html#webapp",
    "href": "srv/documentation.html#webapp",
    "title": "Documentation",
    "section": "Webapp",
    "text": "Webapp\n\nOverview\nHow to use\nWhere files are saved\nHow to manage dependencies\nHow to use in production\nHow to turn off"
  },
  {
    "objectID": "srv/documentation.html#quarto-documentation",
    "href": "srv/documentation.html#quarto-documentation",
    "title": "Documentation",
    "section": "Quarto Documentation",
    "text": "Quarto Documentation\n\nHow to write\n\nHow to render\nWhat get’s rendered?"
  },
  {
    "objectID": "srv/documentation.html#code-documentation",
    "href": "srv/documentation.html#code-documentation",
    "title": "Documentation",
    "section": "Code documentation",
    "text": "Code documentation\n\nDocumentation of the code with docstrings: Library\nHow to write\nHow to render Where does it get rendered?\nHow to link to pages"
  },
  {
    "objectID": "srv/documentation.html#vscode-integration",
    "href": "srv/documentation.html#vscode-integration",
    "title": "Documentation",
    "section": "VSCode integration",
    "text": "VSCode integration\n\nHow to connect\nHow to set the appropriate python interpreter\nCommand prompt\nWhere to run git commands"
  },
  {
    "objectID": "srv/documentation.html#github-pages",
    "href": "srv/documentation.html#github-pages",
    "title": "Documentation",
    "section": "Github pages",
    "text": "Github pages\n\nHow to configure"
  },
  {
    "objectID": "srv/services.html",
    "href": "srv/services.html",
    "title": "Services",
    "section": "",
    "text": "webapp\n\nThis is an example webapp that uses FastHTML and demonstrates how you can have a long running process that still returns a plotly object. Long running processes were difficult in Dash.\n\nJupyterLab\n\nIf this is your first time connecting to the server, you will be asked to enter your token. To get the token, go back to your project directory and run:\nkatx jlab\nThis will give you an address that includes the token. After your first connection your browser will cache the token and you will not be required to reenter it (unless your browser cache is cleared)."
  },
  {
    "objectID": "nbk/wip/med_2_sorted_lists_1.html",
    "href": "nbk/wip/med_2_sorted_lists_1.html",
    "title": "katapult",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nfrom pydantic import BaseModel\n\n\ndef highlight_greaterthan(value, threshold, color='yellow'):\n    \"\"\"Highlights cells greater than a threshold value.\"\"\"\n    if isinstance(value, (int, float)) and value &gt;= threshold:\n        return f'background-color: {color}'\n    return ''\n\ndef highlight_series(series, idx, color=\"green\"):\n    return (\n        series\n        .to_frame()\n        .T\n        .style\n        .map(lambda x: highlight_greaterthan(x, series[idx], color))\n    )\n\n# --------------------------------------------------------------------------------------\nclass Span(BaseModel):\n    low: int\n    high: int\n    \ndef get_split(span: Span):\n    n = span.high - span.low + 1\n    return span.low + n // 2\n    \n# --------------------------------------------------------------------------------------\ndef check_split(a, b, a_split, b_split, **kwargs):\n    # looking at split in 'a' ...\n    lower_split = bool(a[a_split - 1] &gt; b[b_split])\n    raise_split = bool(b[b_split - 1] &gt; a[a_split])\n    \n    is_valid = not (lower_split or raise_split)\n    \n    return dict(is_valid=is_valid, lower_split=lower_split, raise_split=raise_split)\n\ndef estimate_splits(a, b, a_split, b_split, a_span, status):\n    if status[\"lower_split\"]:\n        new_span = Span(low=a_span.low, high=a_split)\n    if status[\"raise_split\"]:\n        new_span = Span(low=a_split, high=a_span.high)\n    new_a_split = get_split(new_span)\n    new_b_split = b_split - (new_a_split - a_split)\n    return dict(\n        a_split = new_a_split, \n        b_split = new_b_split,\n        a_span = new_span,\n    )\n\n# --------------------------------------------------------------------------------------\ndef calculate_median(a, b, est):\n    n = len(a) + len(b)\n    a_split = est[\"a_split\"]\n    b_split = est[\"b_split\"]\n    if n % 2 == 0:\n        max_left = max(a[a_split - 1], b[b_split - 1])\n        min_right = min(a[a_split], b[b_split])\n        med = (max_left + min_right) / 2\n    else:\n        med = min(a[a_split], b[b_split])\n    return med\n\n\n\nna = np.random.randint(50, high=60)\nnb = np.random.randint(60, high=70)\nn = na + nb\n\na_range = Span(low=0, high=na - 1)\nb_range = Span(low=0, high=nb - 1)\ncombined_range = Span(low=0, high=n - 1)\n\nsplit_index = get_split(combined_range)\n\na_split = get_split(a_range)\nb_split = split_index - a_split\n\nprint(f\"{na}, {nb}, {n}\")\na_split, b_split, split_index\n\n54, 61, 115\n\n\n(27, 30, 57)\n\n\n\na = (\n    pd.Series(np.random.randint(0, high=100, size=na))\n    .sort_values()\n    .reset_index(drop=True)\n)\nb = (\n    pd.Series(np.random.randint(0, high=100, size=nb))\n    .sort_values()\n    .reset_index(drop=True)\n)\nest = {\"a_split\": a_split, \"b_split\": b_split, \"a_span\": a_range}\n\n\nhave a, b, initial_splits\nis split valid?\nyes: done\nno: estimate_splits\ngoto is split valid?\n\n\ndisplay(a.pipe(highlight_series, get_split(a_range), \"lightgreen\"))\ndisplay(b.pipe(highlight_series, get_split(b_range), \"lightblue\"))\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n\n0\n1\n2\n3\n7\n8\n10\n10\n13\n14\n14\n16\n17\n23\n31\n37\n37\n38\n40\n40\n42\n44\n50\n52\n53\n54\n55\n56\n58\n60\n63\n64\n64\n67\n67\n67\n68\n69\n70\n71\n73\n73\n74\n76\n78\n79\n79\n83\n85\n89\n92\n95\n96\n98\n98\n\n\n\n\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n\n0\n0\n1\n5\n5\n7\n7\n9\n10\n14\n17\n18\n21\n23\n29\n31\n32\n34\n36\n39\n40\n41\n42\n44\n44\n45\n45\n47\n51\n52\n55\n55\n58\n59\n60\n61\n62\n65\n65\n65\n69\n69\n69\n72\n72\n72\n73\n74\n74\n76\n78\n84\n85\n85\n85\n87\n87\n90\n93\n94\n94\n96\n\n\n\n\n\n\nc = (\n    pd.concat([a, b], ignore_index=True)\n    .sort_values()\n    .reset_index(drop=True)\n)\ndisplay(c.pipe(highlight_series, split_index, \"aqua\"))\nmed_from_sorted = c.median()\nprint(f\"median = {med_from_sorted}\")\n\n\n\n\n\n\n \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n\n\n\n\n0\n0\n1\n1\n2\n3\n5\n5\n7\n7\n7\n8\n9\n10\n10\n10\n13\n14\n14\n14\n16\n17\n17\n18\n21\n23\n23\n29\n31\n31\n32\n34\n36\n37\n37\n38\n39\n40\n40\n40\n41\n42\n42\n44\n44\n44\n45\n45\n47\n50\n51\n52\n52\n53\n54\n55\n55\n55\n56\n58\n58\n59\n60\n60\n61\n62\n63\n64\n64\n65\n65\n65\n67\n67\n67\n68\n69\n69\n69\n69\n70\n71\n72\n72\n72\n73\n73\n73\n74\n74\n74\n76\n76\n78\n78\n79\n79\n83\n84\n85\n85\n85\n85\n87\n87\n89\n90\n92\n93\n94\n94\n95\n96\n96\n98\n98\n\n\n\n\n\nmedian = 56.0\n\n\n\nsplit_status = check_split(a, b, **est)\nsplit_status\n\n\nprint(est)\nprint(split_status)\nprint(\"-\" * 100)\n\nwhile not split_status[\"is_valid\"]:\n    est = estimate_splits(a, b, **est, status=split_status)\n    print(est)\n    split_status = check_split(a, b, **est)\n    print(split_status)\n    print(\"-\" * 100)\n    \ndisplay(a.pipe(highlight_series, est[\"a_split\"], \"lightgreen\"))\ndisplay(b.pipe(highlight_series, est[\"b_split\"], \"lightblue\"))\n\n\nmed_from_algo = calculate_median(a, b, est)\nprint(f\"median: {med_from_algo} == {med_from_sorted} -&gt; {med_from_algo == med_from_sorted}\")\n\nFirst check: 1) \\(\\max(A_{lower}) \\le \\min(B_{upper})\\) 1) \\(\\max(B_{lower}) \\le \\min(A_{upper})\\)\nif (1) and (2) and n is even then median = \\(\\text{med}(\\text{sorted}(\\max(A_{lower}), \\max(B_{lower}), \\min(A_{upper}), \\min(B_{upper}))\\)\nif (1) and not (2):\n\\(A_{lower}\n  \\begin{cases}\n    \\leq A_{upper} \\\\\n    \\leq B_{upper}\n  \\end{cases}\\)\nand\n\\(B_{upper}\n  \\begin{cases}\n    \\geq A_{lower} \\\\\n    \\geq B_{lower}\n  \\end{cases}\\)\nso we can eliminate \\(A_{lower}\\) and \\(B_{upper}\\) from consideration.\nif (2) and not (1):\n\\(B_{lower}\n  \\begin{cases}\n    \\leq A_{upper} \\\\\n    \\leq B_{upper}\n  \\end{cases}\\)\nand\n\\(A_{upper}\n  \\begin{cases}\n    \\geq A_{lower} \\\\\n    \\geq B_{lower}\n  \\end{cases}\\)\nso we can eliminate \\(A_{upper}\\) and \\(B_{lower}\\) from consideration."
  },
  {
    "objectID": "srv/kat.html",
    "href": "srv/kat.html",
    "title": "katapult",
    "section": "",
    "text": "From the help command we can see that kat has three sub commands:\n$ kat --help\nUsage: kat [OPTIONS] COMMAND [ARGS]...\n\n  Katapult CLI - A command line interface for managing Katapult applications.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  config  Add Katapult dynamic PATH augmentation to the user's .bashrc.\n  hub     Manage the Katapult hub and Traefik container.\n  init    Initialize a new Katapult application.\n\n\nThe init command creates a new project using the the katapult template.\nFor example:\n$ kat init\n  [1/4] project_name (My Project):\n  [2/4] project_slug (my_project):\n  [3/4] python_version (3.12):\n  [4/4] host (localhost):\n\nproject_name:\n\nThe “pretty” name of your project to be used as page titles, etc.\n\nproject_slug:\n\nA “computer friendly” version of the project name (all lowercase and no spaces). This is used, for example, as a directory name and in the url. Probably best to just accept the default.\n\npython_version:\n\nUse whatever version of python you like.\n\nhost:\n\nThere are a few commands we will run later that display, for instance, the landing page of your server. If you are just running on your local machine, then “localhost” is likely appropriate, however, if you are running on a network machine, you can enter the appropriate ip address or name and the addresses will be properly formatted. For example, locally you might want http://localhost/my_project/, but if you are running this on an aws vm you might want something like http://10.0.1.25/my_project/. In that case you would enter “10.0.1.25” for host. This is really just a convenience function.\n\n\n\n\nThis command manages the container that runs Traefik, an open-source Application Proxy. New katapult applications are created with tags that tell the hub container to automatically create a route to the new application.\nThis is what allows you to connect to your project via a sub-path, e.g. http://localhost/project1/.\n\n\n\n\n\ngraph TB\n    Internet[Internet Traffic] --&gt; Traefik[katapult-traefik&lt;br/&gt;Hub Container&lt;br/&gt;:80]\n    \n    subgraph Network[\"Network: katapult (localhost)\"]\n        Traefik\n        App1[Container 1&lt;br/&gt;katapult-project1]\n        App2[Container 2&lt;br/&gt;katapult-project2]\n        App3[Container 3&lt;br/&gt;katapult-project3]\n    end\n    \n    Traefik --&gt;|/localhost/project1/*| App1\n    Traefik --&gt;|/localhost/project2/*| App2\n    Traefik --&gt;|/localhost/project3/*| App3\n    \n    classDef hubContainer fill:#e1f5fe,stroke:#01579b,stroke-width:3px\n    classDef appContainer fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n    classDef networkBox fill:#f5f5f5,stroke:#cccccc,stroke-width:1px\n    \n    class Traefik hubContainer\n    class App1,App2,App3 appContainer\n    class Network networkBox\n\n\n\n\n\n\nThe kat hub command verifies whether the Docker network named katapult has been created. If the network does not exist, it will create it. The command then checks whether the hub container has been created, and creates it if it does not exist.\n\n\n\nWhen a project is initiated with kat, it includes a directory named .katapult:\nmy_project/\n├── .katapult\n│   ├── HOSTVARS\n│   └── katx\n├── ...\nThis contains the executable katx, which has a selection of the commands necessary for managing the applications container.\nThe goal of the Katapult template is to create a project that is completely independent, including being independent of the kat command (which may evolve over time). To support that goal, we use the executable katx to store the commands necessary for managing the application container."
  },
  {
    "objectID": "srv/kat.html#kat",
    "href": "srv/kat.html#kat",
    "title": "katapult",
    "section": "",
    "text": "From the help command we can see that kat has three sub commands:\n$ kat --help\nUsage: kat [OPTIONS] COMMAND [ARGS]...\n\n  Katapult CLI - A command line interface for managing Katapult applications.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  config  Add Katapult dynamic PATH augmentation to the user's .bashrc.\n  hub     Manage the Katapult hub and Traefik container.\n  init    Initialize a new Katapult application.\n\n\nThe init command creates a new project using the the katapult template.\nFor example:\n$ kat init\n  [1/4] project_name (My Project):\n  [2/4] project_slug (my_project):\n  [3/4] python_version (3.12):\n  [4/4] host (localhost):\n\nproject_name:\n\nThe “pretty” name of your project to be used as page titles, etc.\n\nproject_slug:\n\nA “computer friendly” version of the project name (all lowercase and no spaces). This is used, for example, as a directory name and in the url. Probably best to just accept the default.\n\npython_version:\n\nUse whatever version of python you like.\n\nhost:\n\nThere are a few commands we will run later that display, for instance, the landing page of your server. If you are just running on your local machine, then “localhost” is likely appropriate, however, if you are running on a network machine, you can enter the appropriate ip address or name and the addresses will be properly formatted. For example, locally you might want http://localhost/my_project/, but if you are running this on an aws vm you might want something like http://10.0.1.25/my_project/. In that case you would enter “10.0.1.25” for host. This is really just a convenience function.\n\n\n\n\nThis command manages the container that runs Traefik, an open-source Application Proxy. New katapult applications are created with tags that tell the hub container to automatically create a route to the new application.\nThis is what allows you to connect to your project via a sub-path, e.g. http://localhost/project1/.\n\n\n\n\n\ngraph TB\n    Internet[Internet Traffic] --&gt; Traefik[katapult-traefik&lt;br/&gt;Hub Container&lt;br/&gt;:80]\n    \n    subgraph Network[\"Network: katapult (localhost)\"]\n        Traefik\n        App1[Container 1&lt;br/&gt;katapult-project1]\n        App2[Container 2&lt;br/&gt;katapult-project2]\n        App3[Container 3&lt;br/&gt;katapult-project3]\n    end\n    \n    Traefik --&gt;|/localhost/project1/*| App1\n    Traefik --&gt;|/localhost/project2/*| App2\n    Traefik --&gt;|/localhost/project3/*| App3\n    \n    classDef hubContainer fill:#e1f5fe,stroke:#01579b,stroke-width:3px\n    classDef appContainer fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n    classDef networkBox fill:#f5f5f5,stroke:#cccccc,stroke-width:1px\n    \n    class Traefik hubContainer\n    class App1,App2,App3 appContainer\n    class Network networkBox\n\n\n\n\n\n\nThe kat hub command verifies whether the Docker network named katapult has been created. If the network does not exist, it will create it. The command then checks whether the hub container has been created, and creates it if it does not exist.\n\n\n\nWhen a project is initiated with kat, it includes a directory named .katapult:\nmy_project/\n├── .katapult\n│   ├── HOSTVARS\n│   └── katx\n├── ...\nThis contains the executable katx, which has a selection of the commands necessary for managing the applications container.\nThe goal of the Katapult template is to create a project that is completely independent, including being independent of the kat command (which may evolve over time). To support that goal, we use the executable katx to store the commands necessary for managing the application container."
  },
  {
    "objectID": "srv/katx.html",
    "href": "srv/katx.html",
    "title": "katapult",
    "section": "",
    "text": "$ katx --help\noptions:\n  --build-args|-b      add additional arguments to docker build.\n  --help               prints this message.\n  --host|-h            sets current hostname. Remembers setting.\n  --user|-u            set the user option to use with docker exec. Defaults to ''. Remembers setting.\n\npositional commands:\n  build                runs docker build.\n  connect              runs docker exec to start a shell in the project's container.\n  debug                Placeholder for custom docker run command intended for debugging.\n  down                 `docker compose down`.\n  jlab                 lists the address (including token) of the currently running jupyter server.\n  ps                   Lists containers associated with this project.\n  render               Run 'quarto render' to create static site files.\n  restart|rebuild      Shortcut for: katx down, katx build, katx up.\n  rm                   `docker rm ...`.\n  rmf                  `docker rm -f ...`.\n  run                  Shortcut for: katx build, katx up, katx render, katx status.\n  status               supervisorctl status.\n  stop                 manual docker stop command. Generally better to use 'down'\n  up                   `docker compose up -d`."
  },
  {
    "objectID": "srv/katx.html#katx",
    "href": "srv/katx.html#katx",
    "title": "katapult",
    "section": "",
    "text": "$ katx --help\noptions:\n  --build-args|-b      add additional arguments to docker build.\n  --help               prints this message.\n  --host|-h            sets current hostname. Remembers setting.\n  --user|-u            set the user option to use with docker exec. Defaults to ''. Remembers setting.\n\npositional commands:\n  build                runs docker build.\n  connect              runs docker exec to start a shell in the project's container.\n  debug                Placeholder for custom docker run command intended for debugging.\n  down                 `docker compose down`.\n  jlab                 lists the address (including token) of the currently running jupyter server.\n  ps                   Lists containers associated with this project.\n  render               Run 'quarto render' to create static site files.\n  restart|rebuild      Shortcut for: katx down, katx build, katx up.\n  rm                   `docker rm ...`.\n  rmf                  `docker rm -f ...`.\n  run                  Shortcut for: katx build, katx up, katx render, katx status.\n  status               supervisorctl status.\n  stop                 manual docker stop command. Generally better to use 'down'\n  up                   `docker compose up -d`."
  }
]