## `kat`

From the help command we can see that `kat` has three sub commands:

```
$ kat --help
Usage: kat [OPTIONS] COMMAND [ARGS]...

  Katapult CLI - A command line interface for managing Katapult applications.

Options:
  --help  Show this message and exit.

Commands:
  config  Add Katapult dynamic PATH augmentation to the user's .bashrc.
  hub     Manage the Katapult hub and Traefik container.
  init    Initialize a new Katapult application.
```

### `kat init`

The `init` command creates a new project using the the katapult template. 

For example: 

```
$ kat init
  [1/4] project_name (My Project):
  [2/4] project_slug (my_project):
  [3/4] python_version (3.12):
  [4/4] host (localhost):

```

project_name:  

  > The "pretty" name of your project to be used as page titles, etc.

project_slug:  

  > A "computer friendly" version of the project name (all lowercase and no spaces). 
  > This is used, for example, as a directory name and in the url. 
  > Probably best to just accept the default.
  
python_version:  

  > Use whatever version of python you like.

host:  

  > There are a few commands we will run later that display, for instance, 
  > the landing page of your server. If you are just running 
  > on your local machine, then "localhost" is likely appropriate, however, if you are 
  > running on a network machine, you can enter the appropriate ip address or name and 
  > the addresses will be properly formatted. For example, locally you might want 
  > [http://localhost/my_project/](), but if you are running this on an aws vm you 
  > might want something like [http://10.0.1.25/my_project/](). In that case you would 
  > enter "10.0.1.25"  for host. This is really just a convenience function.

### `kat hub`

This command manages the container that runs [Traefik](https://doc.traefik.io/traefik/), 
an open-source *Application Proxy*. New katapult applications are created with tags 
that tell the hub container to automatically create a route to the new application.

This is what allows you to connect to your project via a sub-path, 
e.g. [http://localhost/project1/]().

```{mermaid}
graph TB
    Internet[Internet Traffic] --> Traefik[Hub Container: katapult-traefik<br/>listens on host:80<br/>routes to network: katapult]
    
    subgraph Host[" "]
        Traefik
        App1[Container 1<br/>katapult-project1<br/>network: katapult]
        App2[Container 2<br/>katapult-project2<br/>network: katapult]
        App3[Container 3<br/>katapult-project3<br/>network: katapult]
    end
    
    Traefik -->|/host/project1/*| App1
    Traefik -->|/host/project2/*| App2
    Traefik -->|/host/project3/*| App3
    
    classDef hubContainer fill:#e1f5fe,stroke:#01579b,stroke-width:3px
    classDef appContainer fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef hostBox fill:#f5f5f5,stroke:#cccccc,stroke-width:1px
    
    class Traefik hubContainer
    class App1,App2,App3 appContainer
    class Host hostBox
```


The traefik container listens on port 80 of the host, the standard TCP port 
used for HTTP traffic. All katapult projects, including 
the hub container, are attached to the docker network 'katapult'. This allows 
the hub container to route incoming traffic to the appropriate project 
container via a subpath.

The `kat hub` command verifies whether the Docker network named katapult has 
been created. If the network does not exist, it will create it. The command then 
checks whether the hub container has been created, and creates it if it 
does not exist.

### `kat config`

When a project is initiated with `kat`, it includes a directory named `.katapult`:

```
my_project/
├── .katapult
│   ├── HOSTVARS
│   └── katx
├── ...
```

The goal of the Katapult template is to create a project that is completely 
independent, including being independent of the `kat` command 
(which may evolve over time). To support that goal, we create a snapshot of the 
commands required to manage the application container and store those in the 
executable `.katapult/katx`.

We want to add `katx` to our `PATH` such that it is available from
within a project directory or subdirectory. We can do this 
by adding [this code](#dynamic-path-manipulation) to our `.bashrc` with the 
`kat config` command.

### Dynamic path manipulation
```bash
# Section added by katapult to dynamically add katx to path based on project
# Intended to be added to .bashrc

# Store the original PATH so we can rebuild it cleanly later
RAW_PATH="$PATH"

# Keep track of the last working directory so we only update when it changes
LAST_WD=`pwd`

# Function to augment the PATH based on presence of .katapult directories
augment_path() {
    target=".katapult"

    # If we have not changed directories, skip updating the PATH
    if [ "$PWD" = "$LAST_WD" ]; then return 0; fi;

    PATH_ADDITION=""
    scandir="$PWD"

    # Walk up the directory tree toward root
    until [ "$scandir" = "" ]; do
        resolved_target="$scandir"/"$target"

        # If a .katapult directory is found, add it to PATH_ADDITION
        if [ -d "$resolved_target" ]; then
            PATH_ADDITION="$PATH_ADDITION:$resolved_target"
        fi

        # Move up one level in the directory tree
        scandir="${scandir%/*}"
    done

    # Rebuild PATH with all found .katapult directories at the front
    # followed by the original PATH
    PATH="$PATH_ADDITION:$RAW_PATH"

    # Update the last known working directory
    LAST_WD=`pwd`
}

# Ensure augment_path runs every time the prompt is displayed
# This hooks into PROMPT_COMMAND, which is executed before the shell prompt
if [ -z ${PROMPT_COMMAND+x} ]; then
    # If PROMPT_COMMAND is not set, initialize it
    PROMPT_COMMAND="augment_path"
else
    # If PROMPT_COMMAND exists, append augment_path to it
    PROMPT_COMMAND="$PROMPT_COMMAND; augment_path"
fi

# End of section generated by katapult
```


